#BlueJ class context
comment0.target=Club
comment0.text=\r\n\ Representa\ un\ club\ social\ y/o\ deportivo,\ con\ informacion\ de\ sus\ miembros.\ \r\n\ Los\ miembros\ est\u00E1n\ organizados\ en\ lista\ de\ miembros\ regulares\ y\ miembros\ senior.\ Los\ miembros\ senior\ son\ los\ \r\n\ nacidos\ antes\ (estrictamente\ antes)\ de\ 1970.\ \r\n
comment1.params=nombre
comment1.target=Club(java.lang.String)
comment1.text=\r\n\ Constructor\ de\ la\ clase\ Club.\ Crea\ un\ nuevo\ club\ con\ su\ nombre\ y\ ambas\ listas\ de\ miembros\ vacias.\ \r\n
comment10.params=
comment10.target=java.util.HashSet\ nombresUnicos()
comment11.params=
comment11.target=void\ desactivarMenores()
comment11.text=\r\n\ 8.\ Desactiva\ a\ todos\ los\ miembros\ menores\ de\ edad\r\n
comment12.params=
comment12.target=void\ eliminarInactivos()
comment13.params=
comment13.target=double\ promedioEdad()
comment14.params=edad
comment14.target=int\ contarPorEdad(int)
comment15.params=
comment15.target=boolean\ repOK()
comment15.text=\r\n\ Invariante\ de\ representacion\ de\ la\ clase.\ \r\n\ La\ clase\ es\ internamente\ consistente\ si\:\r\n\ -\ el\ nombre\ del\ club\ es\ no\ nulo\ y\ no\ vacio.\r\n\ -\ las\ listas\ de\ miembros\ no\ tienen\ miembros\ en\ comun\r\n\ -\ las\ listas\ de\ miembros\ no\ tienen\ miembros\ con\ ids\ repetidos\r\n\ -\ las\ listas\ de\ miembros\ no\ tienen\ null\r\n\ -\ las\ listas\ de\ miembros\ respetan\ la\ restricci\u00F3n\ de\ nacimiento\:\ la\ lista\ de\ seniors\ s\u00F3lo\ contiene\ miembros\ nacidos\ antes\ de\ 1970,\ y\ la\ lista\ de\r\n\ regulares\ s\u00F3lo\ miembros\ nacidos\ en\ 1970\ o\ posterior.\r\n
comment2.params=miembro
comment2.target=void\ agregarMiembro(Miembro)
comment2.text=\r\n\ Agrega\ un\ miembro\ al\ club.\ La\ lista\ a\ la\ que\ se\ agrega\ el\ miembro\ depende\ del\r\n\ a\u00F1o\ de\ nacimiento\ del\ mismo\:\ si\ es\ menor\ a\ 1970,\ es\ senior,\ sino\ es\ regular.\r\n\ @param\ miembro\ es\ el\ miembro\ a\ agregar\r\n\ Precondici\u00F3n\:\ el\ miembro\ no\ debe\ ser\ null.\r\n\ Precondici\u00F3n\:\ no\ debe\ existir\ en\ ninguna\ de\ las\ listas\ un\ miembro\ con\ el\ mismo\ id.\r\n
comment3.params=id
comment3.target=boolean\ buscarMiembro(int)
comment3.text=\r\n\ Busca\ un\ miembro\ dentro\ de\ las\ dos\ listas\r\n\ \r\n\ @param\ id\ del\ miembro\ a\ buscar\r\n\ @return\ si\ el\ miembro\ esta\ en\ la\ lista\ es\ true\r\n\ sino\ es\ false.\r\n
comment4.params=anhoNacimiento
comment4.target=java.util.HashSet\ obtenerIdsMiembros(int)
comment4.text=\r\n\ Retorna\ el\ conjunto\ de\ ids\ de\ miembros\ nacidos\ en\ un\ a\u00F1o\ determinado.\r\n\ @param\ anhoNacimiento\ es\ el\ a\u00F1o\ de\ nacimiento\ de\ los\ miembros\ a\ retornar.\r\n\ @return\ el\ conjunto\ de\ ids\ de\ miembros\ nacidos\ en\ el\ a\u00F1o\ indicado.\r\n
comment5.params=
comment5.target=Miembro[]\ obtenerMiembrosActivos()
comment5.text=\r\n\ 1.\ Devuelve\ un\ arreglo\ con\ todos\ los\ miembros\ activos\r\n
comment6.params=
comment6.target=java.util.ArrayList\ nombresDeMayoresDeEdad()
comment6.text=\r\n\ 2.\ Devuelve\ una\ lista\ con\ los\ nombres\ de\ los\ mayores\ de\ edad\r\n
comment7.params=nombre
comment7.target=boolean\ existeMiembro(java.lang.String)
comment7.text=\r\n\ 3.\ Devuelve\ true\ si\ existe\ un\ miembro\ con\ el\ nombre\ dado\ (ignorando\ may\u00FAsculas/min\u00FAsculas)\r\n
comment8.params=
comment8.target=Miembro\ miembroDeMayorEdad()
comment8.text=\r\n\ \ 4.\ Devuelve\ el\ miembro\ de\ mayor\ edad\r\n
comment9.params=
comment9.target=java.util.HashSet\ edadesUnicas()
comment9.text=\r\n\ 5.\ Devuelve\ un\ conjunto\ con\ las\ edades\ \u00FAnicas\ de\ los\ miembros\r\n
numComments=16
